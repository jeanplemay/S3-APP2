/*
 * This file was generated by the Gradle 'init' task.
 * then was adapted by lemj0601 & galj704.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 * EMR_Application
 * EMR_Application
 * EMR_Application
 * EMR_Application
 * EMR_Application
 * EMR_Application
 *
 * Attention:
 * the name of the project is setted in settings.gradle
 */

plugins {
	id 'java' //working
	id 'eclipse' // optional (to generate Eclipse project files) //working
	id 'application' //working
  	id 'org.openjfx.javafxplugin' version '0.0.8'//working
  	id "org.sonarqube" version "2.8" // adapted to sonarqube
  	id 'jacoco'
}

mainClassName = 'main.RunApplic' //working

repositories {
	mavenCentral() // to get the jars
}

javafx {
    version = "11.0.2" //working but depends in the jvm
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.graphics'] //working
    // next line must be added in configuration file
    /* -ea --module-path /Users/gonr1001/Documents/javafx-sdk-11.0.2/lib --add-modules=javafx.controls,javafx.fxml,javafx.swing,javafx.graphics*/   
}

jacoco {  //to get the coverage in sonar
    toolVersion = "0.8.4"
    reportsDir = file("./reports") // add this file in the project
}

dependencies {     
  	// TestFX
	testCompile(group: "org.testfx", name: "testfx-junit5", version: "4.0.16-alpha")
	testCompile(group: "org.testfx", name: "testfx-core", version: "4.0.16-alpha") //depends de testfx-junit5
	testCompile('org.testfx:testfx-core:4.0.16-alpha') {
    	exclude group: 'org.testfx', module: 'testfx-internal-java8'
	}
    testCompile "org.testfx:openjfx-monocle:jdk-11+26" // For Java 11
    
	// JUnit
	testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2')
	testCompile(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.2')
	testCompile 'org.mockito:mockito-core:1.+'
	
	testCompile(group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.4')
	testCompile(group: 'org.picocontainer', name: 'picocontainer', version: '2.15')
	
	testRuntime (group: 'org.jfxtras', name: 'openjfx-monocle', version: '1.8.0_20') //working
}


test { // to execute tests in headless mode in jenkins // in eclispse the tests are normal.
	useJUnitPlatform()
	systemProperty 'java.awt.headless', 'false'
	systemProperty 'testfx.robot', 'glass'
	systemProperty 'testfx.headless', 'true'
	systemProperty 'testfx.setup.timeout', '600000'
//  exclude("**/SaveTest.*") // eventually  to exlude a test
//	exclude('**/AlignmentTest.*')	// eventually  to exlude a test
	testLogging {
		events "passed", "skipped", "failed"
	}
	
	 // set heap size for the test JVM(s)
  	maxHeapSize = "1576m"
}


run {
    if (javafx.platform.classifier == 'win') {
        // Temporal fix for Eclipse with JDK 1.8 and Windows 
        systemProperty "java.library.path", "C:\tmp"
    }
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "eemrKey"
        property "sonar.projectName", "EEMR"
		property "sonar.projectVersion", "1.0"
		property "sonar.sources", "${project.projectDir}/src/main/java"
		property "sonar.tests", "${project.projectDir}/src/test/java"
		property "sonar.java.coveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "${project.projectDir}/reports/test/jacocoTestReport.xml"
		property "sonar.host.url", "http://sonar.gel.usherbrooke.ca:9000"
		property "sonar.java.libraries", "${project.projectDir}/lib"
		//property "sonar.java.binaries", "${sourceSets.main.output.classesDirs}" // no binaries on jenkins
		property "sonar.java.test.libraries", "${project.projectDir}/lib"
		property "sonar.scm.disabled", "true"
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'main.RunApplic'
        )
    }
}
sourceSets {
	main {
		java {
			srcDirs= ["src/main/java"]
		}
		resources {
			srcDirs= ["src/main/resources"]
		}
	}
	test {
		java {
			srcDirs= ["src/test/java"]
		}
		resources {		
			srcDirs= ["src/test/resources"]
		}		
	}
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
      	html.enabled false
    }
}

task copyDependencies(type: Copy) {
   from configurations.testCompile
   into './lib'
   doLast {
   		println 'Export of dependencies to lib folder done !'
   }
}

task sonarscan {
	group='verification'
	dependsOn ':copyDependencies'
	dependsOn ':test'
	dependsOn ':jacocoTestReport'
	dependsOn ':sonarqube'
	doLast {
		println 'Sonarqube analysis done !'
	}
}

// Allow to clean the destination directory to avoid testing all tests
[compileJava,compileTestJava].each { task ->
  task.doFirst {
     delete task.destinationDir
  }
}

/*
 * End of build.gradle
 * EMR_Application
 * EMR_Application
 * EMR_Application
 * EMR_Application
 * EMR_Application
 * EMR_Application
 */